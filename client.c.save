/*This program is the client program that connects to the server socket program and transfers files to the server.
This program has two functions:
	-connectToServer: creates the socket to connect to a server.
	-connection: checks whether the client has successfully connected to the server or not.
Author: Pamela Sabio
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>

#include "authenticate.h"
#include "uploadFile.h"

// Function prototypes
static void connectToServer();
static int connection();

int SID;
struct sockaddr_in server;
char clientMessage[512];
char serverMessage[512];
char file_dest[128];
char file_path[150];

int PORT;
char IP[16];

int main(int argc, char *argv[] ){
	if(argc < 5){
		printf("Please pass run the client program in the following format:\n");
		printf("./client IP PORT FILE_SOURCE FILE_DESTINATION\n");

		exit(EXIT_FAILURE);
	}

	strcpy(IP, argv[1]);  // Set IP

	//Set Port
	PORT = atoi(argv[2]);
	if(PORT > 9999 || PORT < 100){
		printf("Please enter a Port number ranging from 100 to 9999\n");
		exit(EXIT_FAILURE);
	}

	// Set file_path
        strcpy(file_path, argv[3]);
        // Check file format to ensure .html
        int len = strlen(file_path);
        if(len < 4){
                printf("Please upload a html, css or php file.\n");
                exit(EXIT_FAILURE);
        }
        const char *extenssion = &file_path[len-5];
        const char *phpcssext = &file_path[len-4];
        if(strcmp(extenssion, ".html") != 0 && strcmp(phpcssext, ".css") != 0 && strcmp(phpcssext,".php") != 0){
                printf("You are uploading an invalid file. Please upload html,css or php files only\n");
                exit(EXIT_FAILURE);
        }

	// Set file_dest
	strcpy(file_dest, argv[4]);
	int isValidDest = 0;
	if((strcmp(file_dest, "root") == 0) || (strcmp(file_dest, "sales") == 0) || (strcmp(file_dest, "promotions") == 0) || (strcmp(file_dest, "offers") == 0) || (strcmp(file_dest, "marketing") == 0)){
		// Okay to continue 
		isValidDest = 1;
	}
	// Check if destination is valid
	if(isValidDest == 0){
		printf("The file destination is invalid.\n");
 		printf("Please enter one of these directories:\n-root\n-sales\n-promotions\n-offers\n-marketing\n");
		exit(EXIT_FAILURE);
	}

	connectToServer();
	clientAuthenticate(SID,clientMessage, serverMessage);
	printf("\nTransfering file, please wait...\n");
	clientUploadFile(SID, file_path, file_dest, clientMessage, serverMessage);
	exit(0);
}


void connectToServer(){
	// Make socket
	SID = socket(AF_INET, SOCK_STREAM, 0);
	if(SID == -1){
		// error
		perror("Socket not created");
		exit(0);
	}else{
		// success
		printf("Connecting to a server, please wait\n");
		// Init the server variables
		server.sin_port = htons(PORT);
		server.sin_addr.s_addr = inet_addr(IP);
		server.sin_family = AF_INET; // IPV4 
		// Connect to a server
		if(!connection()){
			// Connection failed, try again 3 times, otherwise quit the program.
			int counter = 3;
			while(counter != 0){
				if(connection() == 1){
					// Success
					return;
				}else{
					// Try again
					counter--;
					if(counter == 0){
						perror("Failed to connect to the server.");
						exit(EXIT_FAILURE);
					}
				}
			}
		}

		return;
	}
}

int connection(){
	if(connect(SID, (struct sockaddr *) &server, sizeof(server)) < 0 ){
		// Connection have failed
		return 0;
	}else{
		// Connection succesfull
		printf("Connected to Server in port %d.\n\n",PORT);
		return 1;
	}
}
